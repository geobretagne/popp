<?php

function popp_install_menu()
{
    $items                      = [];
    $items['admin/popp-installation'] = [
        'title'            => t('POPP - Installation'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => ['popp_install_install_form'],
        'access arguments' => ['administer modules']
    ];

    return $items;
}

function popp_install_install_form($form, &$form_state)
{
    $form_state['rebuild'] = true;
    if (! isset($form_state['storage']['step'])) {
        return installStepOne($form, $form_state);
    } else {
        switch ($form_state['storage']['step']) {
            case 2:
                return installStepTwo($form, $form_state);
                break;
            default:
                return installStepOne($form, $form_state);
        }
    }
}

function installStepOne($form, &$form_state)
{
    $form['op'] = [
        '#type' => 'hidden',
        '#value' => t('Refresh information'),
    ];
    $form['presentation']                  = [
        '#type'   => 'markup',
        '#prefix' => '<div class="row">
                        <div class="col-xs-12">
                          <p>' . t('Bienvenue dans le programme d\'installation du module POPP.'). '</p>
                        </div>
                      </div>'
    ];
    $form['site_name'] = [
        '#type' => 'textfield',
        '#required' => true,
        '#title' => t('Nom du site'),
        '#default_value' => variable_get('site_name'),
    ];
    $form['language'] = [
        '#title' => t('Langage du site'),
        '#type' => 'select',
        '#options' => array_keys(language_list()),
        '#default_value' => array_key_exists('fr',language_list())?'1':'0',
    ];
    $form['submit_step_one']               = [
        '#type'                     => 'submit',
        '#name'                     => 'stepOne_send',
        '#value'                    => t('Envoyer'),
        '#executes_submit_callback' => false,
        '#validate'                 => ['installStepOne_validate']
    ];
    $form_state['rebuild']                 = true;
    return $form;
}

function installStepOne_validate($form, &$form_state)
{
    /*
     * Let's include l10n_update module, in order to firstly fetch available updates
     */
    variable_set('openlayers_source_type', 'internal');
    $langs = language_list();
    $langsTable = array_keys($langs);
    $langcode = $langsTable[$form_state['values']['language']];
    variable_set('language_default', $langs[$langcode]);
    variable_set('site_name',$form_state['values']['site_name']);
    module_load_include('admin.inc', 'l10n_update');
    module_load_include('inc', 'l10n_update');
    $projects = l10n_update_get_projects();

    // Absence of projects is an error and only occurs if the database table
    // was truncated. In this case we rebuild the project data.
    if (!$projects) {
        l10n_update_build_projects();
        $projects = l10n_update_get_projects();
    }
    // Do fetch available updates
    l10n_update_admin_import_form_submit($form, $form_state);
    $modules             = ['structure_front','term_taxonomy', 'carto']; // Array of module names
    $enable_dependencies = true; // Whether or not to enable dependant modules
    if (module_enable($modules, $enable_dependencies)) {
        /*
         * Revert features to get initial configuration work
        */
        theme_enable(['popp']);
        $feature    = features_get_features('structure_front');
        $components = array_keys($feature->info['features']);
        features_revert(['structure_front' => $components]);
        $feature    = features_get_features('term_taxonomy');
        $components = array_keys($feature->info['features']);
        features_revert(['term_taxonomy' => $components]);
        // Now tell the form to go to step 2
        $form_state['storage']['step'] = 2;
    }else{
        drupal_set_message(t('Impossible d\'activer le module POPP Structure','error'));
    }


}

function installStepTwo($form, &$form_state)
{
    /*
     * Then we load again l10n_update, this time in order to tell Drupal to update translations ...
     */
    module_load_include('admin.inc', 'l10n_update');
    module_load_include('inc', 'l10n_update');
    $history = l10n_update_get_history();
    $available = l10n_update_available_releases();
    $updates = l10n_update_build_updates($history, $available);
    /*
     * ... by putting them into a form element.
     */
    $form['updates'] = [
        '#type' => 'value',
        '#value' => $updates,
    ];

    $form['op'] = [
        '#type' => 'hidden',
        '#value' => t('Update translations'),
    ];
    $form['demo_photo_series'] = [
        '#type' => 'checkbox',
        '#title' => t('Importer des séries photos de démonstration ?'),
    ];
    $form['advanced'] = [
      '#type' => 'fieldset',
      '#collapsible' => true,
      '#collapsed' => true,
      '#title' => t('Paramètres avancés'),
    ];
    $form['advanced']['export_file'] = [
      '#type'              => 'file',
      '#description'       => t('Extension autorisée : export'),
      '#upload_validators' => ['file_validate_extensions' => ['export']],
      '#title'             => t('Fichier de contenu (facultatif)'),
    ];
    $form['submit_step_two'] = [
        '#type'                     => 'submit',
        '#name'                     => 'stepTwo_send',
        '#value'                    => t('Terminer'),
        '#executes_submit_callback' => false,
        '#validate'                 => ['installStepTwo_validate']
    ];

    return $form;
}


function installStepTwo_validate($form, &$form_state)
{

    variable_set('is_popp_install_done', true);
    module_load_include('admin.inc', 'l10n_update');
    module_load_include('inc', 'l10n_update');
    l10n_update_admin_import_form_submit($form, $form_state);
    $validators = ['file_validate_extensions' => ['export']];
    if ($file = file_save_upload('export_file', $validators)) {

        /*
         * Import nodes
         */
        $nodes  = file_get_contents(drupal_realpath($file->uri));
        $result = node_export_import($nodes);
        if ($result['success'] == true) {
            drupal_set_message(t('Contenu importé avec succès'));
        }else{
            drupal_set_message("Le fichier envoyé n'est pas valide", "error");
            drupal_goto("admin/popp-installation");
            file_delete($file);
        }
        file_delete($file);
    }else{
        $nodes  = file_get_contents(drupal_realpath(drupal_get_path('module','popp_install').'/nodes.export'));
        $result = node_export_import($nodes);
        if ($result['success'] == true) {
            drupal_set_message(t('Contenu importé avec succès'));
        }
    }
    if(isset($form_state['values']['demo_photo_series']) && $form_state['values']['demo_photo_series'] == "1"){
        // Extract image files
      /*  $zip = new ArchiverZip(drupal_realpath(drupal_get_path('module','popp_install').'/demo_nodes.zip'));
        $zip->extract(drupal_realpath("public://"));
        unset($zip);*/
        // Import photo series nodes
        $nodes  = file_get_contents(drupal_realpath(drupal_get_path('module','popp_install').'/demo_nodes.export'));
        $result = node_export_import($nodes);
        if ($result['success'] == true) {
            drupal_set_message(t('Contenu de démonstration importé avec succès'));
        }
        $nodes = db_query("SELECT * FROM {node} WHERE type = 'opp_photo'");
        $geos = ['GEOMETRYCOLLECTION(POINT(-4.43918417713935 48.3541432379493))', 'GEOMETRYCOLLECTION(POINT(-2.59197682499608 47.7327584098976))', 'GEOMETRYCOLLECTION(POINT(-3.44225996285121 48.8187631757019))'];
        $files = [0 => ['_M8G9023.JPG'],
            1 => ['2005_Hab1_elven le bourg.JPG', '2006_Hab1_elven.JPG', '2005_hab2_damgan penerf.JPG', '2006_Hab2_damgan penerf.JPG'],
            2 => ['05000101.JPG', '05000102.JPG', '05000103.JPG', '05000104.JPG', '05000105.jpg', '05000106.jpg', '05000107.jpg', '05000108.jpg']];
        foreach ($nodes as $key => $leNode) {
            $leNode = node_load($leNode->nid);
            foreach ($files[$key] as $no => $fichier) {
                $file_temp = file_get_contents(DRUPAL_ROOT . '/sites/all/modules/popp_install/images/' . $fichier);
                $file = file_save_data($file_temp, 'public://' . $fichier, FILE_EXISTS_REPLACE);
                updateFieldCollection($leNode, $file);
            }
            $leNode->field_popp_geolocalisation_photo['und'][0]['feeds'] = true;
            $leNode->field_popp_geolocalisation_photo['und'][0]['wkt'] = $geos[$key];
            node_save($leNode);
        }

    }
    $feature    = features_get_features('carto');
    $components = array_keys($feature->info['features']);
    features_revert(['carto' => $components]);
    $feature    = features_get_features('admin_structure');
    $components = array_keys($feature->info['features']);
    features_revert(['admin_structure' => $components]);
    batch_process('<front>');
    drupal_set_message(t('Contenu importé avec succès'));
}


// Helpful function that updates an entity collectioin
function updateFieldCollection($node, $file)
{
    module_load_include('inc', 'entity', 'includes/entity.controller');
    // Setup the values in the structure expected by the field_collection entity.
    $entity = entity_create('field_collection_item', ['field_name' => 'field_popp_collection_photo']);
    $entity->setHostEntity('node', $node);
    $entity->field_popp_photo_collection_file['und'][] = (array)$file;
    $entity->field_popp_photo_collection_date['und'][0]['value'] = date('Y-m-d',strtotime('09 June 1991'));
    $entity->field_popp_photo_collection_ri['und'][0]['value']  = 'Test RI';
    $entity->save();
    node_save($node);
}