<?php

require_once(drupal_get_path('module', 'popp_utilities') . '/includes/helper_functions.php');
require_once(libraries_get_path('dompdf') . '/dompdf_config.inc.php');

function popp_utilities_menu()
{
    return [
        'utilities/ajax/%/%'              => [
            'page callback'    => 'getChangesSinceLastPhotoTable',
            'page arguments'   => [2, 3],
            'access arguments' => ['access content'],
            'type'             => MENU_CALLBACK,
        ],
        'utilities/ajax_table_desc/%/%'   => [
            'page callback'    => 'getPhotoDescTable',
            'page arguments'   => [2, 3],
            'access arguments' => ['access content'],
            'type'             => MENU_CALLBACK,
        ],
        'utilities/ajax_them_axes/%'      => [
            'page callback'    => 'getSameThematicSeries',
            'page arguments'   => [2],
            'access arguments' => ['access content'],
            'type'             => MENU_CALLBACK,
        ],
        'utilities/ajax_photo_licences/%' => [
            'page callback'    => 'getPhotoLicences',
            'page arguments'   => [2],
            'access arguments' => ['access content'],
            'type'             => MENU_CALLBACK,
        ],
        'caddy/export'                    => [
            'page callback'    => 'exportFromCaddy',
            'access arguments' => ['access content'],
            'page arguments'   => [2],
            'type'             => MENU_NORMAL_ITEM,
        ],
        'caddy/zipexport'                 => [
            'page callback'    => 'zipExportFromCaddy',
            'access arguments' => ['access content'],
            'page arguments'   => [2],
            'type'             => MENU_NORMAL_ITEM,
        ],
        'serie/%/%/export'                => [
            'page callback'    => 'popp_thesaurus_excel_export',
            'page arguments'   => [1, 2],
            'access arguments' => ['access content'],
            'type'             => MENU_CALLBACK,
        ],
        'serie/pdfexport/%'               => [
            'page callback'    => 'exportSerieAsPdf',
            'page arguments'   => [2],
            'access arguments' => ['access content'],
            'type'             => MENU_NORMAL_ITEM,
        ]
    ];
}

/**
 * @return array
 * Hook block_info, allows activating POPP search block
 */
function popp_utilities_block_info()
{
    $blocks = [];

    $blocks['popp_search_block']          = [
        'info' => t('Bloc de recherche POPP'),
    ];
    $blocks['popp_advanced_search_block'] = [
        'info' => t('Bloc de recherche avancée POPP'),
    ];

    return $blocks;
}


/**
 * @param string $delta
 *
 * @return array
 * Hook block view, allows displaying search block
 */
function popp_utilities_block_view($delta = '')
{
    $block = [];

    switch ($delta) {
        case 'popp_search_block':
            $block['subject'] = t('Recherche');
            $data             = getInfosFromSeries();
            $block['content'] = generateInputs($data);
            break;
        case 'popp_advanced_search_block':
            $block['subject'] = t('Recherche avancée');
            $data             = getThesaurusFromSeries();
            $block['content'] = generateThesaurusForm($data);
            break;
    }

    return $block;
}

function generateThesaurusForm($data)
{
    drupal_add_js(drupal_get_path('module', 'popp_utilities') . '/js/search.js');
    drupal_add_css(drupal_get_path('module', 'popp_utilities') . '/css/search_block.css');
    if (false == $result = cache_get('popp_thessearch')) {
        $result = '<div id="advancedSearchModal" class="modal"><div class="modal-dialog"><div class="modal-content"><div class="modal-header">
                    <button aria-label="Fermer" data-dismiss="modal" class="close" type="button"><span>×</span></button>
                    <h4 class="modal-title">Recherche avancée</h4>
                    <p style="font-style:italic;">Cliquez sur une catégorie pour voir les thèmes. Si vous ne choisissez aucun type d\'évolution, les photographies contenant l\'élément seront recherchées.</p>
                </div>
                <div class="modal-body"><form autocomplete="off">';
        $result .= getTermsList($data['required']);
        $result .= getTermsList($data['non_required']);
        $result .= '<button aria-label="Fermer" data-dismiss="modal" class="btn btn-primary btn-block" type="button">Fermer la fenêtre</button>
</form></div></div></div></div>';
        cache_set('popp_thessearch', $result);

        return $result;
    }

    return $result->data;
}

/**
 * @param $dataSet
 *
 * @return string
 * This function generates an accordion, organized by categories
 */
function generateInputs($dataSet)
{
    drupal_add_css(drupal_get_path('module', 'popp_utilities') . '/css/search_block.css');
    $result = cache_get('popp_search');
    if (! $result) {
        $result = '<div id="popp_search_block"><form id="poppSearchForm" autocomplete="off"><div id="accordion">';
        $first  = true;
        foreach ($dataSet as $label => $category) {
            $result .= '<div class="panel panel-default">
                        <div id="headingOne" role="tab" class="panel-heading">
                            <h4 class="panel-title">
                                <a aria-controls="collapseOne" aria-expanded="' . ($first ? 'true' : 'false') . '" href="#' . strtolower(str_replace(' ', '_', $label)) . '" data-parent="#accordion" data-toggle="collapse">' . $label . '</a>
                            </h4>
                        </div>
                        <div aria-labelledby="' . strtolower(str_replace(' ', '_', $label)) . '" id="' . strtolower(str_replace(' ', '_', $label)) . '" role="tabpanel" class="panel-collapse collapse ' . ($first ? 'in' : '') . '">
                         <div class="panel-body">';
            foreach ($category as $item => $data) {
                switch ($data['type']) {
                    case "select":
                        $result .= generateSelect($item, $data);
                        break;
                    case "checkbox":

                        break;
                }
            }
            if ($label == 'Avancée') {
                $result .= '<p>&nbsp;</p><a id="thesSearchButton" data-toggle="modal" data-target="#advancedSearchModal" class="btn btn-info btn-block">Afficher thésaurus</a>';
            }
            $result .= '</div></div></div>';
            $first = false;
        }
        $result .= '<div style="padding:5px 0;"><a class="btn btn-info btn-block" id="spatialSearch"/>Recherche spatiale</a></div>';
        $result .= '<button class="btn btn-primary btn-block" id="searchButton">Rechercher</button>';
        cache_set('popp_search', $result . "</form></div>");

        return $result . "</form></div>";
    } else {
        return $result->data;
    }
}

/**
 * @param $item
 * @param $data
 *
 * @return string
 * Returns an HTML string containing a select, filled with found items
 */

function generateSelect($item, $data)
{
    $input = '<div class="search-select">
        <label for="' . $item . '">' . $data['label'] . ' :</label>
        <select class="form-control" name="' . $item . '" id="' . $item . '">
            <option value=""> - Tout -</option>
        ';
    if (! empty($data['values'])) {
        foreach ($data['values'] as $id => $inputData) {
            $input .= '<option presenton="' . implode(',', $inputData['presentOnNode']) . '" value="' . $id . '">' . $inputData['label'] . '</option>';
        }
    }
    $input .= '</select>
        </div>';

    return $input;
}

/**
 * @return array
 * Implementing hook_openlayers_behaviors()
 * This function allows to activate special POPP behaviors on OL maps
 */
function popp_utilities_openlayers_behaviors()
{
    return [
        'openlayers_behavior_cluster_popp'        => [
            'title'       => t('Clustering - POPP Style'),
            'description' => t('Groups points on a map depending on zoom level. You should NOT activate cluster feature at the same time.'),
            'type'        => 'layer',
            'path'        => drupal_get_path('module', 'popp_utilities') . '/includes',
            'behavior'    => [
                'file'   => 'openlayers_behavior_cluster_popp.class.php',
                'class'  => 'openlayers_behavior_cluster_popp',
                'parent' => 'openlayers_behavior',
            ],
        ],
        'openlayers_search_behavior_popp'         => [
            'title'       => t('Search - POPP'),
            'description' => t('Allows filtering POPP photo series'),
            'type'        => 'layer',
            'path'        => drupal_get_path('module', 'popp_utilities') . '/includes',
            'behavior'    => [
                'file'   => 'openlayers_behavior_popp_search.class.php',
                'class'  => 'openlayers_behavior_popp_search',
                'parent' => 'openlayers_behavior',
            ],
        ],
        'openlayers_behavior_popp_popup'          => [
            'title'       => t('Popup - POPP'),
            'description' => t('Allows showing popups when hovering a photo serie point'),
            'type'        => 'layer',
            'path'        => drupal_get_path('module', 'popp_utilities') . '/includes',
            'behavior'    => [
                'file'   => 'openlayers_behavior_popp_popup.class.php',
                'class'  => 'openlayers_behavior_popp_popup',
                'parent' => 'openlayers_behavior',
            ],
        ],
        'openlayers_behavior_popp_series_display' => [
            'title'       => t('Photo serie display'),
            'description' => t('Allows searching a photo serie on a map'),
            'type'        => 'layer',
            'path'        => drupal_get_path('module', 'popp_utilities') . '/includes',
            'behavior'    => [
                'file'   => 'openlayers_behavior_popp_series.class.php',
                'class'  => 'openlayers_behavior_popp_series',
                'parent' => 'openlayers_behavior',
            ],
        ],
    ];
}

function popp_utilities_entity_form_validate(&$entity_form, &$form_state)
{
    if ($entity_form['#entity']->type != 'popp_photo') {
        return;
    }
    $inlineForm = null;
    foreach ($form_state['values']['field_popp_serie_photo_list'][LANGUAGE_NONE]['entities'] as $id => $element) {
        if (isset($element['form'])) {
            $inlineForm = $element['form'];
            break;
        }
    }
    $thesAmount = seekThesaurusAmount($entity_form['#entity']->field_popp_photo_thesaurus[LANGUAGE_NONE], 'field_popp_thes_elt');
    if ($thesAmount < 2) {
        form_error($entity_form['field_popp_photo_thesaurus'], 'Vous devez saisir au moins deux éléments de thésaurus');
    }
}

function popp_utilities_node_presave($node)
{
    if ($node->type == 'popp_photo_serie') {
        if (false !== variable_get('import_in_progress')) {
            return;
        }
        $region                                                       = taxonomy_term_load($node->field_popp_serie_district[LANGUAGE_NONE][0]['tid']);
        $supportingStruct                                             = $node->field_popp_serie_supp_struct[LANGUAGE_NONE][0]['target_id'];
        $node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'] = $region->field_regional_code[LANGUAGE_NONE][0]['value'] . ' ' . sprintf('%02d', $supportingStruct) . ' ' . sprintf('%04d', $node->nid);
    }
}

function popp_utilities_node_insert($node)
{
    clearCacheSearch($node);
}

function seekThesaurusAmount($elements, $key)
{
    $count = 0;
    foreach ($elements as $element) {
        if (! is_array($element)) {
            continue;
        }
        if (! empty($element[$key][LANGUAGE_NONE][0]['tid'])) {
            $count++;
        }
    }

    return $count;
}

function popp_utilities_inline_entity_form_entity_form_alter(&$entity_form, &$form_state)
{
    $entity_form['actions']['ief_edit_save']['#value'] = 'Sauvegarder';
    if ($entity_form['#entity']->type == 'popp_photo') {
        $entity_form['#title'] = 'Ajouter une photo';
    }
    if ($entity_form['#entity']->type == 'popp_photo' && (isset($entity_form['#entity']->is_new) && $entity_form['#entity']->is_new)) {
        if(isset($form_state['build_info']['args'][0]->nid)){
            $parentNid         = $form_state['build_info']['args'][0]->nid;
            $existingThesaurus = getExistingThesaurus($parentNid);
            $existingNonOaiPmh = getNotOaiPmhData($parentNid);
            $index             = 0;
            foreach ($existingThesaurus as $thesElement) {
                if (! ifThesaurusOk($thesElement)) {
                    continue;
                }
                $entity_form['field_popp_photo_thesaurus'][LANGUAGE_NONE][$index]                                                          = $entity_form['field_popp_photo_thesaurus'][LANGUAGE_NONE][0];
                $entity_form['field_popp_photo_thesaurus'][LANGUAGE_NONE][$index]['#parents'][5]                                           = $index;
                $entity_form['field_popp_photo_thesaurus'][LANGUAGE_NONE][$index]['field_popp_thes_elt'][LANGUAGE_NONE]['#default_value']  = [$thesElement['thes_elements'][LANGUAGE_NONE][0]['tid'] => $thesElement['thes_elements'][LANGUAGE_NONE][0]['tid']];
                $entity_form['field_popp_photo_thesaurus'][LANGUAGE_NONE][$index]['field_popp_thes_evol'][LANGUAGE_NONE]['#default_value'] = [0 => 'stability'];
                $index++;
            }
            foreach ($existingNonOaiPmh as $key => $data) {
                $entity_form[$key][LANGUAGE_NONE][0]['value']['#default_value'] = $data;
            }
        }
    }

    $entity_form['#element_validate'][] = 'popp_utilities_entity_form_validate';
}

function ifThesaurusOk($thesElement)
{
    foreach ($thesElement['evolutions'][LANGUAGE_NONE] as $evolution) {
        if ($evolution['value'] == 'disappeared') {
            return false;
        }
    }

    return true;
}

function getNotOaiPmhData($parentNid)
{
    $parentNode = node_load($parentNid);
    $result     = [];
    if (isset($parentNode->field_popp_serie_photo_list[LANGUAGE_NONE][0])) {
        $photoId   = $parentNode->field_popp_serie_photo_list[LANGUAGE_NONE][count($parentNode->field_popp_serie_photo_list[LANGUAGE_NONE]) - 1]['target_id'];
        $photo     = node_load($photoId);
        $fieldList = [
            'field_popp_photo_hour',
            'field_popp_photo_camera_type',
            'field_popp_photo_focal',
            'field_popp_photo_aperture',
            'field_popp_photo_film_type',
            'field_popp_photo_iso',
            'field_popp_photo_original_weight',
            'field_popp_photo_camera_inclinat',
            'field_popp_photo_tripod_height',
            'field_popp_photo_orientation',
            'field_popp_photo_altitude',
            'field_popp_photo_tidal_coeff'
        ];
        foreach ($fieldList as $field) {
            if (isset($photo->{$field}[LANGUAGE_NONE][0]['value'])) {
                $result[$field] = $photo->{$field}[LANGUAGE_NONE][0]['value'];
            }
        }
    }

    return $result;
}

function getExistingThesaurus($parentNid)
{
    module_load_include('inc', 'entity', 'includes/entity.controller');
    module_load_include('inc', 'field_collection');
    $parentNode = node_load($parentNid);
    $result     = [];
    $index      = count($parentNode->field_popp_serie_photo_list[LANGUAGE_NONE]);
    $index-=2;
    if (isset($parentNode->field_popp_serie_photo_list[LANGUAGE_NONE][$index])) {
        $photo = node_load($parentNode->field_popp_serie_photo_list[LANGUAGE_NONE][$index]['target_id']);
        foreach ($photo->field_popp_photo_thesaurus[LANGUAGE_NONE] as $item) {
            $entity   = field_collection_item_load($item['value']);
            $result[] = ['thes_elements' => $entity->field_popp_thes_elt, 'evolutions' => $entity->field_popp_thes_evol];
        }
    }

    return $result;
}

/**
 * Implements hook_node_update().
 */
function popp_utilities_node_update($node)
{
    clearCacheSearch($node);
}

function clearCacheSearch($node)
{
    if ($node->type == 'popp_photo' || $node->type == 'popp_photo_serie') {
        if (false !== cache_get('popp_search')) {
            cache_clear_all('popp_search', 'cache');
            cache_clear_all('popp_thessearch', 'cache');
        }
    }
}

function getPhotoDescTable($serieNid, $photoOrder, $print = true)
{
    $serie       = node_load($serieNid);
    $otherPhotos = '';
    $result      = '';
    $result .= '<table class="table table-striped"><thead><tr><th>Photo</th><th>Description des éléments / des changements</th></tr></thead><tbody>';
    if (isset($serie->field_popp_serie_refdoc[LANGUAGE_NONE][0]['target_id'])) {
        $refdoc = node_load($serie->field_popp_serie_refdoc[LANGUAGE_NONE][0]['target_id']);
        if ($photoOrder == "-1") {
            if ($print) {
                print '<div class="field field-type-interval field-label-above"><div class="field-label">Lieu de conservation:</div>' . $refdoc->field_popp_refdoc_storage_place[LANGUAGE_NONE][0]['value'] . '</div>
        <div class="field field-type-interval field-label-above"><div class="field-label">Description précise du document:</div>' . $refdoc->field_popp_refdoc_precise_desc['und'][0]['value'] . '</div>';

                return;
            }

            return '<div class="field field-type-interval field-label-above"><div class="field-label">Lieu de conservation:</div>' . $refdoc->field_popp_refdoc_storage_place[LANGUAGE_NONE][0]['value'] . '</div>
        <div class="field field-type-interval field-label-above"><div class="field-label">Description précise du document:</div>' . $refdoc->field_popp_refdoc_precise_desc['und'][0]['value'] . '</div>';
        }
        $otherPhotos .= '<tr><td>Document référence</td><td>' . $refdoc->field_popp_refdoc_precise_desc[LANGUAGE_NONE][0]['value'] . '</td></tr>';
    }
    foreach ($serie->field_popp_serie_photo_list[LANGUAGE_NONE] as $index => $photoNid) {
        if (! isset($photoNid['target_id'])) {
            continue;
        }
        $photo = node_load($photoNid['target_id']);
        if (isset($photo->field_popp_photo_description[LANGUAGE_NONE][0]['value']) && $photo->field_popp_photo_description[LANGUAGE_NONE][0]['value'] != '') {
            $description = $photo->field_popp_photo_description[LANGUAGE_NONE][0]['value'];
        } else {
            $description = "Pas de description";
        }
        if ($index != $photoOrder) {
            $otherPhotos .= '<tr><td>Photo n°' . ($index + 1) . '</td><td>' . $description . '</td></tr>';
        } else {
            $result .= '<tr><td>Photo courante</td><td>' . $description . '</td></tr>';
        }
    }
    $result .= $otherPhotos;
    $result .= '</tbody></table>';
    if ($print) {
        print $result;
    } else {
        return $result;
    }
}

function getSameThematicSeries($nid, $return = false)
{
    $serie       = node_load($nid);
    $result      = "";
    $resultTable = [];
    if (! isset($serie->field_popp_serie_thematic_axis[LANGUAGE_NONE][0]) && ! isset($serie->field_popp_serie_loc_axes[LANGUAGE_NONE][0])) {
        if(!$return){
            print '';
            drupal_exit();
        }else{
            return "";
        }
    }
    if (isset($serie->field_popp_serie_thematic_axis[LANGUAGE_NONE][0])) {
        foreach ($serie->field_popp_serie_thematic_axis[LANGUAGE_NONE] as $thematicAxis) {
            $query       = db_query("SELECT nid, title
FROM {node} n
,{field_data_field_popp_serie_thematic_axis} ta
WHERE n.nid = ta.entity_id
AND ta.field_popp_serie_thematic_axis_tid = :tid", [':tid' => $thematicAxis['tid']]);
            $resultTable = array_replace($query->fetchAllKeyed(), $resultTable);
        }
    }
    if (isset($serie->field_popp_serie_loc_axes[LANGUAGE_NONE])) {
        foreach ($serie->field_popp_serie_loc_axes[LANGUAGE_NONE] as $thematicAxis) {
            $query       = db_query("SELECT nid, title
FROM {node} n
,{field_data_field_popp_serie_thematic_axis} ta
WHERE n.nid = ta.entity_id
AND ta.field_popp_serie_thematic_axis_tid = :tid
AND n.nid != :nid", [':tid' => $thematicAxis['tid'],
                     ':nid' => $nid]);
            $resultTable = array_replace($query->fetchAllKeyed(), $resultTable);
        }
    }

    foreach ($resultTable as $actualNid => $title) {
        if ($actualNid == $nid) {
            continue;
        }
        $result .= '<a href="/node/' . $actualNid . '">' . $title . '</a><br/>';
    }
    if ($result != "") {
        $result = '<div class="field-label">Série(s) du même axe thématique:&nbsp;</div>' . $result;
    }
    if (! $return) {
        print '<div class="field field-type-interval field-label-above">' . $result . '</div>';
        drupal_exit();
    }

    return '<div class="field field-type-interval field-label-above">' . $result . '</div>';
}

function getThematicSeries($tid)
{
    $result = '';
    $resultTable = [];
    $query       = db_query("SELECT nid, title
FROM {node} n
,{field_data_field_popp_serie_thematic_axis} ta
WHERE n.nid = ta.entity_id
AND ta.field_popp_serie_thematic_axis_tid = :tid", [':tid' => $tid]);
    $resultTable = array_replace($query->fetchAllKeyed(), $resultTable);


    foreach ($resultTable as $actualNid => $title) {
        $result .= '<a href="/node/' . $actualNid . '">' . $title . '</a><br/>';
    }

    return '<div class="field field-type-interval field-label-above">' . $result . '</div>';
}

function getPhotoLicences($nid, $return = false)
{
    $serie       = node_load($nid);
    $resultTable = [];
    if (! isset($serie->field_popp_serie_thematic_axis[LANGUAGE_NONE][0]) && ! isset($serie->field_popp_serie_loc_axes[LANGUAGE_NONE][0])) {
        if (! $return) {
            print '';
        }else{
            return "";
        }
    }
    if (isset($serie->field_popp_serie_photo_list[LANGUAGE_NONE][0])) {
        foreach ($serie->field_popp_serie_photo_list[LANGUAGE_NONE] as $photo) {
            $photography = node_load($photo['target_id']);
            if (isset($photography->field_popp_photo_copyrights[LANGUAGE_NONE][0])) {
                $taxo                    = taxonomy_term_load($photography->field_popp_photo_copyrights[LANGUAGE_NONE][0]['tid']);
                $resultTable[$taxo->tid] = '<a href="/licences" title="Voir les licences">'.$taxo->name.'</a>';
            }
        }
    }
    if (! $return) {
        print('<div class="field field-type-interval field-label-above"><div class="field-label">Licence(s) des photos de la série:</div>' . implode(', ', $resultTable) . '</div>');
        drupal_exit();
    }

    return ('<div class="field field-type-interval field-label-above"><div class="field-label">Licence(s) des photos de la série:</div>' . implode(', ', $resultTable) . '</div>');
}

function popp_thesaurus_excel_export($nid, $photoUnd)
{
    require_once('sites/all/libraries/PHPExcel/Classes/PHPExcel.php');
    $node        = node_load($nid);
    $globalTable = getChangesArray($node);
    $serieInfos  = prepareSerieInfosExcel($node, $photoUnd);
    $serieInfos  = prepareTableForExcelExport($serieInfos);

    $changesSinceLastPhoto = preparePhotoTableForExcelExport($node, $photoUnd);

    $excel = new PHPExcel();
    $excel->getActiveSheet()->fromArray($serieInfos, null, 'A2');
    $index = 9 + count($changesSinceLastPhoto);
    $excel->getActiveSheet()->fromArray($changesSinceLastPhoto, null, 'A9');
    $excel->getActiveSheet()->setCellValue('A1', 'Identification')->setCellValue('C1', 'Localisation')->mergeCells('A8:D8')->setCellValue('A8', 'Changements par rapport à la photo précédente')->mergeCells('A' . ($index + 1) . ':D' . ($index + 1))->setCellValue('A' . ($index + 1), 'Changements intervenus sur la durée de la série
');
    $excel->getActiveSheet()
        ->fromArray(
            $globalTable,
            null,
            'A' . ($index + 2)
        );
    $style       = [
        'font' => [
            'bold' => true
        ]
    ];
    $globalStyle = [
        'font' => [
            'name' => 'Arial'
        ]
    ];

    $detailsStyle = [
        'alignment' => [
            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
        ]
    ];
    $excel->getActiveSheet()->getStyle("A1:G550")->applyFromArray($globalStyle);
    $excel->getActiveSheet()->getStyle("B10:G" . (9 + count($changesSinceLastPhoto)))->applyFromArray($detailsStyle);
    $excel->getActiveSheet()->getStyle("A1:D1")->applyFromArray($style);
    $excel->getActiveSheet()->getStyle("A8:G9")->applyFromArray($style);
    $excel->getActiveSheet()->getStyle('A' . ($index + 1) . ':' . 'G' . ($index + 2))->applyFromArray($style);
    $excel->getActiveSheet()->getStyle('B' . ($index + 3) . ':' . 'G' . (($index + 3) + count($globalTable)))->applyFromArray($detailsStyle);
    foreach (range('A', $excel->getActiveSheet()->getHighestDataColumn()) as $col) {
        $excel->getActiveSheet()
            ->getColumnDimension($col)
            ->setAutoSize(true);
    }
    $serieCode = isset($node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value']) ? $node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'] : $node->nid;
    header('Content-Type: application/vnd.ms-excel');
    header('Content-Disposition: attachment;filename="' . $serieCode . '_thesaurus.xls"');
    header('Cache-Control: max-age=0');

    $writer = PHPExcel_IOFactory::createWriter($excel, 'Excel5');
    $writer->save('php://output');
}

function prepareSerieInfosExcel($node, $photoUnd)
{
    $result = [];
    if (! isset($node->field_popp_serie_district[LANGUAGE_NONE][0]['tid'])) {
        $result['region'] = 'N/R';
    } else {
        $tmpTaxo          = taxonomy_term_load($node->field_popp_serie_district[LANGUAGE_NONE][0]['tid']);
        $result['region'] = $tmpTaxo->name;
    }
    if (! isset($node->field_popp_serie_county[LANGUAGE_NONE][0]['tid'])) {
        $result['departement'] = '';
    } else {
        $tmpTaxo               = taxonomy_term_load($node->field_popp_serie_county[LANGUAGE_NONE][0]['tid']);
        $result['departement'] = $tmpTaxo->name;
    }
    if (! isset($node->field_popp_serie_town[LANGUAGE_NONE][0]['tid'])) {
        $result['town'] = 'N/R';
    } else {
        $tmpTaxo        = taxonomy_term_load($node->field_popp_serie_town[LANGUAGE_NONE][0]['tid']);
        $result['town'] = $tmpTaxo->name;
    }
    if (! isset($node->field_popp_serie_opp[LANGUAGE_NONE][0]['tid'])) {
        $result['opp'] = 'N/R';
    } else {
        $tmpTaxo       = taxonomy_term_load($node->field_popp_serie_opp[LANGUAGE_NONE][0]['tid']);
        $result['opp'] = $tmpTaxo->name;
    }
    $result['serie_id'] = $node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'];
    if ($photoUnd == -1) {
        $result['photo'] = 'N/R';
    } else {
        $result['photo'] = $node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'] . ' ' . sprintf('%02d', ($photoUnd + 1));
    }
    if (isset($node->field_popp_serie_supp_struct[LANGUAGE_NONE][0])) {
        $supp_struct           = node_load($node->field_popp_serie_supp_struct[LANGUAGE_NONE][0]['target_id']);
        $result['supp_struct'] = $supp_struct->title;
    } else {
        $result['supp_struct'] = 'N/R';
    }
    if (isset($node->field_popp_serie_address[LANGUAGE_NONE][0])) {
        $result['address'] = $node->field_popp_serie_address[LANGUAGE_NONE][0]['value'];
    } else {
        $result['address'] = 'N/R';
    }

    $pgs = new PostgisGeometrySet('GEOMETRYCOLLECTION', 4326);
    $pgs->fromGeometry($node->field_popp_serie_place[LANGUAGE_NONE]);
    $result['gps']        = str_replace('))', '', str_replace('GEOMETRYCOLLECTION(POINT(', '', $pgs->getText()));
    $result['identifier'] = $node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'];
    $result['title']      = $node->title;

    return $result;
}

function preparePhotoTableForExcelExport($node, $actualUnd)
{
    $changes      = getChanges();
    $tableContent = getChangesSincePreviousAsArray($node, $changes, null, $actualUnd);
    $result       = [['Éléments', 'Stabilité', 'Apparition', 'Disparition', 'Augmentation', 'Diminution', 'Changement d\'apparence']];
    if (false === $tableContent) {
        return ['NA'];
    }
    foreach ($tableContent as $line) {
        $tmp = [$line['name']];
        foreach ($changes as $change) {
            $tmp[] = (count($line['changes'][$change]) > 0 ? 'X' : '');
        }
        $result[] = $tmp;
    }
    if (empty($tableContent)) {
        $result = ['Aucun changement'];
    }

    return $result;
}

function prepareTableForExcelExport($baseTable)
{
    $result   = [];
    $result[] = ['Serie', $baseTable['title'], 'Région', $baseTable['region']];
    $result[] = ['Identifiant', $baseTable['identifier'], 'Département', $baseTable['departement']];
    $result[] = ['Porteur OPP', $baseTable['supp_struct'], 'Commune', $baseTable['town']];
    $result[] = ['OPP', $baseTable['opp'], 'Adresse/Lieu de la prise de vue', $baseTable['address']];
    $result[] = ['Photo', $baseTable['photo'], 'Coordonnées GPS', $baseTable['gps']];

    return $result;
}

function exportSerieAsPdf($nid)
{
    $node     = node_load($nid);
    $rightTab = [];
    if (! $node) {
        drupal_set_message("Identifiant de la série invalide", "error");
        drupal_exit();
    }
    // TODO : check en dessous

    $head = '<head>
        <style type="text/css">
        body{
            font-family:sans-serif;
            font-size:12px;
        }
        table{
            border-collapse:collapse;
        }
        table tr th{
            background:#cfcfcf;
        }
        table tr td, table tr th{
            border:1px solid black;
        }
        .field .field-label {
          font-weight: bold;
        }
        h3 {
          background: #e9e9e9 none repeat scroll 0 0;
          margin-top:5px;
          margin-bottom:10px;
        }
        </style>
    </head>';

    $rightTab = generateSerieTab($node);

    $dompdf        = new DOMPDF();
    $generatedHtml = '';
    $total         = count($node->field_popp_serie_photo_list[LANGUAGE_NONE]) - 1;
    $refdoc        = '';
    if (isset($node->field_popp_serie_refdoc[LANGUAGE_NONE])) {
        $refdocnode        = $node->field_popp_serie_refdoc[LANGUAGE_NONE][0];
        $rightTab['photo'] = getRefDocInfos($node);
        $image             = getPhotoAsImage($refdocnode, 2);
        $image             = preg_replace('/(width="\d+")/', 'width="100%"', $image);
        $image             = preg_replace('/(height="\d+")/', '', $image);
        $generatedHtml .= '<div style="page-break-after:always;">
            <div style="font-size:13px; font-style:italic;"><img alt="logo" src="' . theme_get_setting('logo') . '" height="50px"/>
                <span style="position:absolute;top:16px;left:70px;">Plateforme des Observatoires Photographiques du Paysage de Bretagne</span>
            </div>
            <div style="width:69%;margin-right:1%;display:inline-block;">  <h2>' . $node->title . '</h2><div>' . $image . '</div>' . getDescription($node, -1) . '
            <h4>Changements intervenus sur la durée de la série</h4>
                    ' . getChangesTable($node) . '</div>
            <div style="width:29%;display:inline-block;vertical-align:top;">' . implode('', $rightTab) . '</div>
        </div>';
    }
    foreach ($node->field_popp_serie_photo_list[LANGUAGE_NONE] as $und => $photo) {
        $rightTab['photo'] = getPhotosInfos($node, $und, $photo);
        $image             = getPhotoAsImage($photo);
        $image             = preg_replace('/(width="\d+")/', 'width="100%"', $image);
        $image             = preg_replace('/(height="\d+")/', '', $image);
        $generatedHtml .= '<div style="page-break-after:' . ($total == $und ? 'auto' : 'always') . ';">
            <div style="font-size:13px; font-style:italic;"><img alt="logo" src="' . theme_get_setting('logo') . '" height="50px"/>
                <span style="position:absolute;top:16px;left:70px;">Plateforme des Observatoires Photographiques du Paysage de Bretagne</span>
            </div>
            <div style="width:69%;margin-right:1%;display:inline-block;">  <h2>' . $node->title . '</h2><div>' . $image . '</div>' . getDescription($node, $und) . '<h4>Changements par rapport à la photo précédente</h4>
            ' . getChangesSinceLastPhotoTable($node->nid, $photo['target_id'], false) . '
            <h4>Changements intervenus sur la durée de la série</h4>
                    ' . getChangesTable($node) . '</div>
            <div style="width:29%;display:inline-block;vertical-align:top;">' . implode('', $rightTab) . '</div>
        </div>';
    }
    $dompdf->load_html('<html>' . $head .
        '<body>' . $generatedHtml . '
            </body></html>');
    $dompdf->render();

    $exts  = getImageExts();

    $output = $dompdf->output();
    if(file_exists(drupal_realpath('temporary://') . '/export_serie_'.$node->nid.'.pdf')){
        unlink(drupal_realpath('temporary://') . '/export_serie_'.$node->nid.'.pdf');
    }
    file_put_contents(drupal_realpath('temporary://') . '/export_serie_'.$node->nid.'.pdf', $output);
    $zip         = new ZipArchive();
    $archive_uri = 'temporary://export_serie_'.$node->nid.'.zip';
    if ($zip->open(drupal_realpath($archive_uri), (file_exists(drupal_realpath($archive_uri))?ZipArchive::OVERWRITE:ZipArchive::CREATE)) === true) {
        $serieName = $node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'];
        $rep       = $serieName . ' ' . $node->title;
        $zip->addEmptyDir($rep);
        $zip->addFile(drupal_realpath('temporary://') . '/export_serie_'.$node->nid.'.pdf', $rep . '/export_serie_'.$node->nid.'.pdf');
        foreach ($node->field_popp_serie_photo_list[LANGUAGE_NONE] as $und => $photoNid) {
            $photo = node_load($photoNid['target_id']);
            if (! isset($exts[$photo->field_popp_photo_file[LANGUAGE_NONE][0]['filemime']])) {
                continue;
            }
            $ext = $exts[$photo->field_popp_photo_file[LANGUAGE_NONE][0]['filemime']];
            $zip->addFile(drupal_realpath($photo->field_popp_photo_file[LANGUAGE_NONE][0]['uri']), $rep . '/' . $serieName . '_' . ($und + 1) . '.' . $ext);
        }
        $zip->close();
    }else{
        drupal_set_message("L'export de la série a échoué. Merci de réessayer plus tard","warning");
        drupal_goto('/node/'.$node->nid);
        drupal_exit();
    }

    header('Content-Type: application/zip');
    header('Content-Disposition: attachment; filename=' . urlencode('export_serie_'.$node->nid.'.zip'));
    header('Content-Transfer-Encoding: binary');
    readfile(drupal_realpath($archive_uri));
    unlink(drupal_realpath($archive_uri));
    drupal_exit();
}

function getPhotoAsImage($photo, $block_id = 2)
{
    $photoView = views_get_view('popp_search_result_view');
    $photoView->set_display('block_' . $block_id);
    $photoView->set_arguments([$photo['target_id']]);
    $photoView->pre_execute();
    $photoView->execute('block_' . $block_id);

    return $photoView->render();
}

function getPhotosInfos($node, $und, $photo)
{
    $photoView = views_get_view('popp_search_result_view');
    $photoView->set_display('block_3');
    $photoView->set_arguments([$node->nid, $photo['target_id']]);
    $photoView->pre_execute();
    $photoView->execute('block_3');
    $return = '<h3>Photo ' . $node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'] . ' ' . ($und + 1) . '</h3>';
    $rf     = field_view_field('node', $node, 'field_popp_serie_landscape_per');
    $return .= render($rf);
    $return .= $photoView->render();

    return $return;
}

function getRefDocInfos($node)
{
    $photoView = views_get_view('popp_refdoc_display');
    $photoView->set_display('block_1');
    $photoView->set_arguments([$node->nid]);
    $photoView->pre_execute();
    $photoView->execute('block_1');
    $return = '<h3>Document référence ' . $node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'] . ' 0</h3>';
    $rf     = field_view_field('node', $node, 'field_popp_serie_landscape_per');
    $return .= render($rf);
    $return .= $photoView->render();

    return $return;
}

function generateSerieTab($node)
{
    $pgs = new PostgisGeometrySet('GEOMETRYCOLLECTION', 4326);
    $pgs->fromGeometry($node->field_popp_serie_place[LANGUAGE_NONE]);
    $geom             = 'Long : ' . str_replace(' ', '<br/>Lat : ', str_replace('))', '', str_replace('GEOMETRYCOLLECTION(POINT(', '', $pgs->getText())));
    $structureLogo    = "";
    $oppBackingStruct = "";

    if (isset($node->field_popp_serie_supp_struct[LANGUAGE_NONE])) {
        $suppStruct       = node_load($node->field_popp_serie_supp_struct[LANGUAGE_NONE][0]['target_id']);
        $image            = field_get_items('node', $suppStruct, 'field_popp_supp_struct_logo');
        if(isset($image[0])){
            $structureLogo    = field_view_value('node', $suppStruct, 'field_popp_supp_struct_logo', $image[0], [
                'type'     => 'image',
                'settings' => [
                    'image_style' => 'sidebar_image',
                    'image_link'  => '',
                ],
            ]);
        }else{
            $structureLogo    = '';
        }
        $ss               = field_view_field('node', $node, 'field_popp_serie_supp_struct');
        $oppBackingStruct = render($ss);
    }
    $serieCode              = $node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'];
    $rightTab['suppStruct'] = drupal_render($structureLogo);
    $rightTab['suppStruct'] .= $oppBackingStruct;
    $rightTab['serie'] = '<h3>Série ' . $serieCode . '</h3>';
    $per               = field_view_field('node', $node, 'field_popp_serie_per');
    $rightTab['serie'] .= render($per);
    $ta = field_view_field('node', $node, 'field_popp_serie_thematic_axis');
    $rightTab['serie'] .= render($ta);
    $la = field_view_field('node', $node, 'field_popp_serie_loc_axes');
    $rightTab['serie'] .= render($la);
    $rightTab['serie'] .= getSameThematicSeries($node->nid, true);
    $rightTab['serie'] .= getPhotoLicences($node->nid, true);

    $rightTab['photo'] = [];

    $rightTab['coverage'] = '<h3>Territoire</h3>';
    $re                   = field_view_field('node', $node, 'field_popp_serie_region');
    $rightTab['coverage'] .= render($re);
    $cy = field_view_field('node', $node, 'field_popp_serie_county');
    $rightTab['coverage'] .= render($cy);
    $twn = field_view_field('node', $node, 'field_popp_serie_town');
    $rightTab['coverage'] .= render($twn);
    $add = field_view_field('node', $node, 'field_popp_serie_address');
    $rightTab['coverage'] .= render($add);
    $ls = field_view_field('node', $node, 'field_popp_serie_landscape_set');
    $rightTab['coverage'] .= render($ls);
    $lu = field_view_field('node', $node, 'field_popp_serie_landscape_unit');
    $rightTab['coverage'] .= render($lu);
    $lp = field_view_field('node', $node, 'field_popp_serie_landscape_per');
    $rightTab['coverage'] .= render($lp);
    $rightTab['coverage'] .= '<div class="field">
                                        <div class="field-label">Emplacement de la série:&nbsp;</div>
                                        <div class="field-item even">' . $geom . '</div>
                                    </div>';

    return $rightTab;
}

function getDescription($node, $und)
{
    $return    = '';
    $dateDescr = '';
    if (isset($node->field_popp_serie_first_desc_date[LANGUAGE_NONE][0]['value'])) {
        $tmp       = new DateTime($node->field_popp_serie_first_desc_date[LANGUAGE_NONE][0]['value']);
        $dateDescr = '<p><i>Le ' . $tmp->format('d/m/Y') . '</i></p>';
    }
    $ai = field_view_field('node', $node, 'field_popp_serie_author_intent');
    $return .= render($ai);
    $fd = field_view_field('node', $node, 'field_popp_serie_first_desc');
    $return .= render($fd);
    $return .= $dateDescr;
    $return .= getPhotoDescTable($node->nid, $und, false);

    return $return;
}

function zipExportFromCaddy($nodes)
{
    if ($nodes == '') {
        drupal_set_message('Vous devez choisir au moins une série à exporter', 'error');
        drupal_goto('mon-panier');
        drupal_exit();
    }
    $exts  = getImageExts();
    $nodes = explode(',', $nodes);
    $nodes = array_slice($nodes, 0, 4);
    $caddy = views_get_view('caddy');
    $caddy->set_display('page');
    $caddy->pre_execute();
    $caddy->execute('page');
    $zip         = new ZipArchive();
    $archive_uri = 'temporary://export_panier.zip';
    if(file_exists(drupal_realpath($archive_uri))){
        unlink(drupal_realpath($archive_uri));
    }
    $photosLoupees = 0;
    $photosTotal = 0;
    if ($zip->open(drupal_realpath($archive_uri), ZipArchive::CREATE) === true) {
        foreach ($caddy->result as $serie) {
            if (! in_array($serie->nid, $nodes)) {
                continue;
            }
            $serieName = empty($serie->_field_data['nid']['entity']->field_popp_serie_identifier[LANGUAGE_NONE])?'':$serie->_field_data['nid']['entity']->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'];
            $rep       = $serieName . ' ' . $serie->_field_data['nid']['entity']->title;
            $zip->addEmptyDir($rep);
            foreach ($serie->_field_data['nid']['entity']->field_popp_serie_photo_list[LANGUAGE_NONE] as $und => $photoNid) {
                $photo = node_load($photoNid['target_id']);
                $photosTotal++;
                if (! isset($exts[$photo->field_popp_photo_file[LANGUAGE_NONE][0]['filemime']])) {
                    $photosLoupees++;
                    continue;
                }
                $ext = $exts[$photo->field_popp_photo_file[LANGUAGE_NONE][0]['filemime']];
                $zip->addFile(drupal_realpath($photo->field_popp_photo_file[LANGUAGE_NONE][0]['uri']), $rep . '/' . $serieName . '_' . ($und + 1) . '.' . $ext);
            }
        }
        $zip->close();
        if($photosLoupees == $photosTotal){
            drupal_set_message("Les photos n'ont pas pu être exportées suite à une erreur.", "error");
            drupal_goto('mon-panier');
            drupal_exit();
        }
        header('Content-Type: application/octet-stream');
        header('Content-Disposition: attachment; filename=' . urlencode('export_panier.zip'));
        header('Content-Transfer-Encoding: binary');

        readfile(drupal_realpath($archive_uri));
        drupal_exit();
    } else {
        drupal_set_message("Une erreur est survenue à la création de l'archive", "error");
        drupal_goto('mon-panier');
        drupal_exit();
    }
}

function getImageExts(){
    return ['image/png' => 'png', 'image/jpeg' => 'jpg', 'image/jpg' => 'jpg', 'image/gif' => 'gif'];
}

/**
 * Implements hook_views_pre_render(), in  order to remove duplicates due to relationship with Organic Group.
 */
function popp_utilities_views_pre_render(&$view)
{
    //update any popp_photo_serie content
    //update own popp_photo_serie content

    if($view->name == 'popp_views_home_layer'){
        $presentNids = [];
        foreach($view->result as $key => $result){
            if(!in_array($result->nid, $presentNids)){
                $presentNids[] = $result->nid;
            }else{
                unset($view->result[$key]);
            }
        }
    }
    if($view->name == 'popp_series_management_opp' && $view->current_display == "page"){
        global $user;
        foreach($view->result as $key => $result){
            $node = node_load($result->nid);
            if(!og_user_access_entity('update own popp_photo_serie content', 'popp_photo_serie', $node, $user) && !og_user_access_entity('update any popp_photo_serie content', 'node', $node, $user)){
                unset($view->result[$key]);
            }
        }
    }
}

/**
 * Implements hook_print_pdf_filename_alter().
 */
function popp_utilities_print_pdf_filename_alter(&$pdf_filename, &$path)
{
    $nid = explode('/', $path)[1];
    $node = node_load($nid);
    $pdf_filename = $pdf_filename.'-'.$node->field_popp_serie_identifier[LANGUAGE_NONE][0]['value'];
}