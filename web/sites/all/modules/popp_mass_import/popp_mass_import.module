<?php
/**
 * Inserts plupload library into global configuration
 */
global $conf;
$conf['plupload_library_path'] = drupal_get_path('module', 'popp_mass_import') . '/js/plupload-1.5.8';
/*
 * Menu hook, used to declare paths
 */
function popp_mass_import_menu()
{
    return [
        'popp/import' => [
            'title'            => t('Importer une série'),
            'page callback'    => 'drupal_get_form',
            'page arguments'   => ['popp_mass_import_form'],
            'access arguments' => ['access content']
        ],
    ];
}

/*
 * Import form
 */
function getImportFormStepTwo($form, &$form_state)
{
    $form['generalInfos'] = [
        '#type'   => 'markup',
        '#suffix' => '<p>' . t($form_state['storage']['serieNid'] . 'Pour ajouter les photos à la série, cliquez sur le bouton "Ajouter des fichiers", sélectionnez les photos de votre série, puis cliquez sur "Continuer"') . '</p>',
    ];
    $form['photos']       = [
        '#type'              => 'plupload',
        '#title'             => t('Photographies'),
        '#upload_validators' => [
            'file_validate_extensions' => ['jpg jpeg gif png'],
            'my_custom_file_validator' => [''],
        ],
        '#plupload_settings' => [
            'runtimes'   => 'html5',
            'chunk_size' => '1mb',
        ],
    ];
    $form['send']         = [
        '#type'                     => 'submit',
        '#default_value'            => 'Continuer',
        '#executes_submit_callback' => false,
    ];
    $form['#validate'][]  = 'popp_mass_import_form_step_two_submit';

    return $form;
}

function popp_mass_import_form($form, &$form_state)
{
    $form_state['rebuild'] = true;
    if (! isset($form_state['storage']['serieNid'])) {
        return getImportFormStepOne($form, $form_state);
    } else {
        return getImportFormStepTwo($form, $form_state);
    }
}

function getImportFormStepOne($form, &$form_state)
{
    $form['generalInfos']  = [
        '#type'   => 'markup',
        '#suffix' => '<p>' . t('Pour commencer, indiquez le classeur de votre série puis cliquez sur "Continuer"') . '</p>',
    ];
    $form['excel']         = [
        '#type'              => 'file',
        '#title'             => t('Classeur'),
        '#description'       => t('Extension autorisée : csv'),
        '#upload_validators' => ['file_validate_extensions' => ['csv']],
    ];
    $form['send']          = [
        '#type'                     => 'submit',
        '#value'                    => t('Continuer'),
        '#name'                     => t('Continuer'),
        '#executes_submit_callback' => false,
        '#validate'                 => ['popp_mass_import_form_step_one_validate'],
    ];
    $form_state['rebuild'] = true;

    return $form;
}

function popp_mass_import_form_step_one_validate($form, &$form_state)
{
    global $user;
    $validators = ['file_validate_extensions' => ['csv']];
    $file       = file_save_upload('excel', $validators, 'public://');
    $parser     = fopen(file_create_url($file->uri), 'r');
    /* Twice, in order to get the values of the serie */
    $serie       = fgetcsv($parser, 0, ';');
    $serie       = fgetcsv($parser, 0, ';');
    $nid         = 0;
    $node        = new stdClass();
    $node->title = $serie[0];
    $node->type  = 'serie_popp';
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->uid      = $user->uid;
    $node->status   = 1; //(1 or 0): published or not
    $node->promote  = 0; //(1 or 0): promoted to front page
    $node->comment  = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
    $node           = node_submit($node); // Prepare node for saving
    node_save($node);

    if ($node) {
        if (insertPhotoNodes($parser, $node->nid, $form_state)) {
            $form_state['storage']['serieNid'] = $node->nid;
        } else {
            drupal_set_message(t("Une erreur est survenue en parcourant le tableur au niveau de la série. Vérifiez le format de vos données, puis réessayez.", "error"));
        }
    } else {
        drupal_set_message(t("Une erreur est survenue en parcourant le tableur au niveau de la série. Vérifiez le format de vos données, puis réessayez.", "error"));
    }

    file_delete($file, true);
    /**
     * Ensuite parser le fichier excel, création d'un node pour la série et de n nodes pour les photos qui vont avec.
     * Ensuite, étape 2
     */
}

function insertPhotoNodes(&$parser, $serie_nid, &$form_state)
{
    // TODO : Get the taxonomy term id by searching human readable value
    global $user;
    // Jump directly to next line to avoid titles
    $line  = fgetcsv($parser, 0, ';');
    $count = 0;
    while ($line = fgetcsv($parser, 0, ';')) {
        foreach ($line as &$lineToConvert) {
            // Convert to utf8
            $lineToConvert = utf8_encode($lineToConvert);
        }
        $node        = new stdClass();
        $node->title = $line[9];
        $node->type  = 'photo';
        node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
        $node->language                                     = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
        $node->uid                                          = $user->uid;
        $node->status                                       = 1; //(1 or 0): published or not
        $node->promote                                      = 0; //(1 or 0): promoted to front page
        $node->comment                                      = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
        $node->field_popp_photo_subject[LANGUAGE_NONE][0]['value']       = $line[1];
        $node->field_popp_photo_description[LANGUAGE_NONE][0]['value'] = $line[2];
        $node->field_popp_photo_author[LANGUAGE_NONE][0]['value']      = $line[3];
        $node->field_popp_photo_linked_serie[LANGUAGE_NONE][0]           = [
            'target_id'   => $serie_nid,
            'target_type' => 'node',
        ];
        $node->field_popp_photo_editor[LANGUAGE_NONE][0]              = [
            'target_id'   => $line[4],
            'target_type' => 'taxonomy_term',
        ];
        $node->field_popp_photo_contributor[LANGUAGE_NONE][0]         = [
            'target_id'   => $line[5],
            'target_type' => 'taxonomy_term',
        ];
        $date                                               = DateTime::createFromFormat('d/m/Y', $line[6]);
        $node->field_popp_photo_date[LANGUAGE_NONE][0]['value']        = $date->format('Y-m-d H:i:s');
        $node->field_popp_photo_content_type[LANGUAGE_NONE][0]      = [
            'target_id'   => $line[7],
            'target_type' => 'taxonomy_term',
        ];
        $node->field_popp_photo_format[LANGUAGE_NONE][0]               = [
            'target_id'   => $line[8],
            'target_type' => 'taxonomy_term',
        ];
        $node->field_popp_photo_copyrights[LANGUAGE_NONE][0]               = [
            'target_id'   => $line[10],
            'target_type' => 'taxonomy_term',
        ];
        $node                                               = node_submit($node); // Prepare node for saving
        node_save($node);
        if (false !== $node) {
            $count++;
            $form_state['storage']['sent'][$node->nid] = $line[0];
        } else {
            drupal_set_message(t("Une erreur est survenue lors de l'ajout du fichier ") . $line[0], "warning");
        }
    }
    if ($count > 0) {
        drupal_set_message($count . t(" photos ont été ajoutées"));

        return true;
    } else {
        return false;
    }
}

function popp_mass_import_form_step_two_submit($form, &$form_state)
{
    foreach ($form_state['values']['photos'] as $file) {
        if (in_array($file['name'], $form_state['storage']['sent'])) {
            $nid       = array_search($file['name'], $form_state['storage']['sent']);
            $node      = node_load($nid);
            $file_temp = file_get_contents($file['tmppath']);
            $file      = file_save_data($file_temp, 'public://' . $file['name'], FILE_EXISTS_RENAME);
            /* For later use, will generate image styles :
                image_style_create_derivative(image_style_load($style_name), $file_loaded->uri, $style_path);
             */
            $node->field_photo = [
                'und' => [
                    0 => [
                        'fid'      => $file->fid,
                        'filename' => $file->filename,
                        'filemime' => $file->filemime,
                        'uid'      => 1,
                        'uri'      => $file->uri,
                        'status'   => 1,
                        'display'  => 1
                    ]
                ]
            ];
            node_save($node);
        }
    }
    drupal_set_message(t('Les photos ont bien été ajoutées.'));
}
